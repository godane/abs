diff --git a/src/Kbuild b/src/Kbuild
index aef6fa1..9923463 100644
--- a/src/Kbuild
+++ b/src/Kbuild
@@ -19,6 +19,7 @@ speakup-objs := \
 	buffers.o \
 	devsynth.o \
 	i18n.o \
+	fakekey.o \
 	main.o \
 	keyhelp.o \
 	kobjects.o \
diff --git a/src/fakekey.c b/src/fakekey.c
new file mode 100644
index 0000000..7a63a0d
--- /dev/null
+++ b/src/fakekey.c
@@ -0,0 +1,105 @@
+/* fakekey.c
+ * Functions for simulating key-presses.
+ *
+ * Copyright (C) 2010 the Speakup Team
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#include <linux/types.h>
+#include <linux/slab.h>
+#include <linux/preempt.h>
+#include <linux/percpu.h>
+#include <linux/input.h>
+
+#include "speakup.h"
+
+DEFINE_PER_CPU(bool, reporting_keystroke);
+
+static struct input_dev *virt_keyboard;
+
+int speakup_add_virtual_keyboard(void)
+{
+	int err;
+
+	virt_keyboard = input_allocate_device();
+
+	if (!virt_keyboard)
+		return -ENOMEM;
+
+	virt_keyboard->name = "Speakup";
+	virt_keyboard->id.bustype = BUS_VIRTUAL;
+	virt_keyboard->phys = "speakup/input0";
+	virt_keyboard->dev.parent = NULL;
+
+	__set_bit(EV_KEY, virt_keyboard->evbit);
+	__set_bit(KEY_DOWN, virt_keyboard->keybit);
+
+	err = input_register_device(virt_keyboard);
+	if (err) {
+		input_free_device(virt_keyboard);
+		virt_keyboard = NULL;
+	}
+
+	return err;
+}
+
+void speakup_remove_virtual_keyboard(void)
+{
+	if (virt_keyboard != NULL) {
+		input_unregister_device(virt_keyboard);
+		input_free_device(virt_keyboard);
+		virt_keyboard = NULL;
+	}
+}
+
+#define PRESSED 1
+#define RELEASED 0
+
+/*
+	 * Send a simulated down-arrow to the application.
+	 */
+
+void speakup_fake_down_arrow(void)
+{
+	unsigned long flags;
+
+	/* disable keyboard interrupts */
+	local_irq_save(flags);
+	/* don't change CPU */
+	preempt_disable();
+
+	__get_cpu_var(reporting_keystroke) = true;
+	input_report_key(virt_keyboard, KEY_DOWN, PRESSED);
+	input_report_key(virt_keyboard, KEY_DOWN, RELEASED);
+	__get_cpu_var(reporting_keystroke) = false;
+
+	/* reenable preemption */
+	preempt_enable();
+	/* reenable keyboard interrupts */
+	local_irq_restore(flags);
+}
+
+/*
+	 * Are we handling a simulated keypress on the current CPU?
+	 * Returns a boolean.
+	 */
+
+bool speakup_fake_key_pressed(void)
+{
+	bool is_pressed;
+
+	is_pressed = get_cpu_var(reporting_keystroke);
+	put_cpu_var(reporting_keystroke);
+
+	return is_pressed;
+}
diff --git a/src/main.c b/src/main.c
index 322f0d3..6cd84a6 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1311,11 +1311,10 @@ enum {
 };
 
 static void
-kbd_fakekey2(struct vc_data *vc, int v, int command)
+kbd_fakekey2(struct vc_data *vc, int command)
 {
 	del_timer(&cursor_timer);
-	k_handler[KT_CUR](vc, v, 0);
-	k_handler[KT_CUR](vc, v, 1);
+	speakup_fake_down_arrow();
 	start_read_all_timer(vc, command);
 }
 
@@ -1331,7 +1330,7 @@ read_all_doc(struct vc_data *vc)
 	cursor_track = read_all_mode;
 	reset_index_count(0);
 	if (get_sentence_buf(vc, 0) == -1)
-		kbd_fakekey2(vc, 0, RA_DOWN_ARROW);
+		kbd_fakekey2(vc, RA_DOWN_ARROW);
 	else {
 		say_sentence_num(0, 0);
 		synth_insert_next_index(0);
@@ -1372,7 +1371,7 @@ handle_cursor_read_all(struct vc_data *vc, int command)
 		reset_index_count(sentcount+1);
 		if (indcount == 1) {
 			if (!say_sentence_num(sentcount+1, 0)) {
-				kbd_fakekey2(vc, 0, RA_FIND_NEXT_SENT);
+				kbd_fakekey2(vc, RA_FIND_NEXT_SENT);
 				return;
 			}
 			synth_insert_next_index(0);
@@ -1384,7 +1383,7 @@ handle_cursor_read_all(struct vc_data *vc, int command)
 			} else
 				synth_insert_next_index(0);
 			if (!say_sentence_num(sn, 0)) {
-				kbd_fakekey2(vc, 0, RA_FIND_NEXT_SENT);
+				kbd_fakekey2(vc, RA_FIND_NEXT_SENT);
 				return;
 			}
 			synth_insert_next_index(0);
@@ -1400,7 +1399,7 @@ handle_cursor_read_all(struct vc_data *vc, int command)
 		break;
 	case RA_DOWN_ARROW:
 		if (get_sentence_buf(vc, 0) == -1) {
-			kbd_fakekey2(vc, 0, RA_DOWN_ARROW);
+			kbd_fakekey2(vc, RA_DOWN_ARROW);
 		} else {
 			say_sentence_num(0, 0);
 			synth_insert_next_index(0);
@@ -1412,7 +1411,7 @@ handle_cursor_read_all(struct vc_data *vc, int command)
 		if (rv == -1)
 			read_all_doc(vc);
 		if (rv == 0)
-			kbd_fakekey2(vc, 0, RA_FIND_NEXT_SENT);
+			kbd_fakekey2(vc, RA_FIND_NEXT_SENT);
 		else {
 			say_sentence_num(1, 0);
 			synth_insert_next_index(0);
@@ -1424,7 +1423,7 @@ handle_cursor_read_all(struct vc_data *vc, int command)
 	case RA_TIMER:
 		get_index_count(&indcount, &sentcount);
 		if (indcount < 2)
-			kbd_fakekey2(vc, 0, RA_DOWN_ARROW);
+			kbd_fakekey2(vc, RA_DOWN_ARROW);
 		else
 			start_read_all_timer(vc, RA_TIMER);
 		break;
@@ -2127,6 +2126,19 @@ static int keyboard_notifier_call(struct notifier_block *nb,
 
 	if (vc->vc_mode == KD_GRAPHICS)
 		return ret;
+
+	/*
+	 * First, determine whether we are handling a fake keypress on
+	 * the current processor.  If we are, then return NOTIFY_OK,
+	 * to pass the keystroke up the chain.  This prevents us from
+	 * trying to take the Speakup lock while it is held by the
+	 * processor on which the simulated keystroke was generated.
+	 * Also, the simulated keystrokes should be ignored by Speakup.
+	 */
+
+	if (speakup_fake_key_pressed())
+		return ret;
+
 	switch (code) {
 	case KBD_KEYCODE:
 		/* speakup requires keycode and keysym currently */
@@ -2226,16 +2238,22 @@ static void __exit speakup_exit(void)
 	for (i = 0; speakup_console[i]; i++)
 		kfree(speakup_console[i]);
 	speakup_kobj_exit();
+	speakup_remove_virtual_keyboard();
 }
 
 /* call by: module_init() */
 static int __init speakup_init(void)
 {
 	int i;
+	int err;
 	struct st_spk_t *first_console;
 	struct vc_data *vc = vc_cons[fg_console].d;
 	struct var_t *var;
 
+	err = speakup_add_virtual_keyboard();
+	if (err)
+		return err;
+
 	initialize_msgs(); /* Initialize arrays for i18n. */
 	first_console = kzalloc(sizeof(*first_console), GFP_KERNEL);
 	if (!first_console)
@@ -2283,6 +2301,7 @@ static int __init speakup_init(void)
 	return 0;
 }
 
+
 module_init(speakup_init);
 module_exit(speakup_exit);
 
diff --git a/src/speakup.h b/src/speakup.h
index 8228565..0139e64 100644
--- a/src/speakup.h
+++ b/src/speakup.h
@@ -122,4 +122,10 @@ extern int quiet_boot;
 extern char *synth_name;
 extern struct bleep unprocessed_sound;
 
+/* Prototypes from fakekey.c. */
+int speakup_add_virtual_keyboard(void);
+void speakup_remove_virtual_keyboard(void);
+void speakup_fake_down_arrow(void);
+bool speakup_fake_key_pressed(void);
+
 #endif
-- 
1.7.2.1

